{"version":3,"sources":["App/PlayerView.js","App/TeamView.js","App/MatchView.js","App/SummonerStats.js","App/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","currPlayerRootWin","background","currPlayerRootLoss","PlayerView","props","classes","performancePercentage","performance","toFixed","rootClassName","isCurrPlayer","win","className","Grid","container","spacing","item","xs","sm","Typography","variant","summoner","champion","TeamView","players","team","playerView","map","player","key","searchSummoner","name","MatchView","Card","CardContent","redTeam","blueTeam","matchContainer","SummonerStats","matches","match","isOnRedTeam","i","length","id","header","margin","title","textField","width","contentView","summonerStatsPaper","loadingView","pastSearchButton","App","useState","searchName","setSearchName","isLoading","setIsLoading","summonerStats","setSummonerStats","search","currSearchName","searchHistory","JSON","parse","localStorage","getItem","setItem","stringify","searchParams","URLSearchParams","append","encodeURIComponent","url","window","location","protocol","host","toString","fetch","then","res","json","catch","error","console","log","finally","Container","maxWidth","LinearProgress","Paper","recentSearches","Object","entries","sort","a","b","x","slice","value","Button","onClick","align","TextField","label","autoFocus","onChange","event","target","onKeyPress","preventDefault","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ae509014.chunk.js","sourcesContent":["import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {\r\n    Grid,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        padding: \"8px\",\r\n    },\r\n    currPlayerRootWin: {\r\n        background: \"linear-gradient(45deg, #64b5f6 0%, white 70%)\",\r\n        padding: \"8px\",\r\n    },\r\n    currPlayerRootLoss: {\r\n        background: \"linear-gradient(45deg, #e57373 0%, white 70%)\",\r\n        padding: \"8px\",\r\n    }\r\n}));\r\n\r\nexport default function PlayerView(props) {\r\n    let classes = useStyles();\r\n\r\n    const performancePercentage = (100*props.performance).toFixed(1) + \"%\";\r\n\r\n    const rootClassName = props.isCurrPlayer ?\r\n        (props.win ? classes.currPlayerRootWin : classes.currPlayerRootLoss) :\r\n        classes.root;\r\n\r\n    return (\r\n        <div className={rootClassName}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={4} sm={4}>\r\n                    <Typography variant={\"body1\"}>{props.summoner}</Typography>\r\n                </Grid>\r\n                <Grid item xs={4} sm={4}>\r\n                    <Typography variant={\"body1\"}>{props.champion}</Typography>\r\n                </Grid>\r\n                <Grid item xs={4} sm={4}>\r\n                    <Typography variant={\"body1\"}>{performancePercentage}</Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {\r\n    Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport PlayerView from \"./PlayerView\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n    }\r\n}));\r\n\r\nexport default function TeamView(props) {\r\n    const classes = useStyles();\r\n\r\n    const players = props.team.players;\r\n    const win = props.team.win;\r\n\r\n    const playerView = players.map(player => (\r\n        <PlayerView\r\n            key={player.summoner}\r\n            summoner={player.summoner}\r\n            champion={player.champion}\r\n            performance={player.performance}\r\n            isCurrPlayer={props.searchSummoner === player.summoner}\r\n            win={win}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography variant={\"h5\"}>{props.name} - {win ? \"Win\" : \"Loss\"}</Typography>\r\n            {playerView}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {\r\n    Typography,\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport TeamView from \"./TeamView\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n    }\r\n}));\r\n\r\nexport default function MatchView(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Card>\r\n                <CardContent>\r\n                    <Typography variant={\"h3\"}>{props.win ? \"Victory\" : \"Defeat\"}</Typography>\r\n                    <Grid container spacing={4}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TeamView\r\n                                team={props.redTeam}\r\n                                name={\"Red Team\"}\r\n                                searchSummoner={props.searchSummoner}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TeamView\r\n                                team={props.blueTeam}\r\n                                name={\"Blue Team\"}\r\n                                searchSummoner={props.searchSummoner}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nimport MatchView from \"./MatchView\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n    },\r\n    matchContainer: {\r\n        padding: \"10px\",\r\n    },\r\n}));\r\n\r\nexport default function SummonerStats(props) {\r\n    const classes = useStyles();\r\n\r\n    const matches = props.matches.map(match => {\r\n        let isOnRedTeam = false;\r\n        for (let i = 0; i < match.redTeam.players.length; ++i) {\r\n            if (match.redTeam.players[i].summoner === props.searchSummoner) {\r\n                isOnRedTeam = true;\r\n                break;\r\n            }\r\n        }\r\n        return (\r\n            <div key={match.id} className={classes.matchContainer}>\r\n                <MatchView\r\n                    win={(isOnRedTeam && match.redTeam.win) || (!isOnRedTeam && !match.redTeam.win)}\r\n                    searchSummoner={props.searchSummoner}\r\n                    redTeam={match.redTeam}\r\n                    blueTeam={match.blueTeam}\r\n                />\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {matches}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {\n    Container,\n    Grid,\n    Typography,\n    TextField,\n    LinearProgress,\n    Button,\n    Paper,\n} from \"@material-ui/core\";\n\nimport SummonerStats from \"./SummonerStats\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n    },\n\n    header: {\n        margin: \"40px auto\"\n    },\n    title: {\n    },\n    textField: {\n        width: \"100%\"\n    },\n\n    contentView: {\n    },\n    summonerStatsPaper: {\n    },\n    loadingView: {\n    },\n    pastSearchButton: {\n    }\n}));\n\nexport default function App() {\n    const classes = useStyles();\n\n    const [searchName, setSearchName] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const [summonerStats, setSummonerStats] = useState(null);\n\n    function search() {\n        if (searchName.length === 0) return;\n\n        const currSearchName = searchName;\n\n        let searchHistory = JSON.parse(localStorage.getItem(\"searchHistory\"));\n        searchHistory = searchHistory ? searchHistory : {};\n        if (searchHistory[currSearchName]) {\n            searchHistory[currSearchName] += 1;\n        } else {\n            searchHistory[currSearchName] = 1;\n        }\n        localStorage.setItem(\"searchHistory\", JSON.stringify(searchHistory));\n\n        setIsLoading(true);\n        const searchParams = new URLSearchParams();\n        searchParams.append(\"summoner\", encodeURIComponent(searchName));\n        searchParams.append(\"num_matches\", \"5\");\n        const url = window.location.protocol + \"//\" + window.location.host + `/analyze?${searchParams.toString()}`;\n        fetch(url)\n            .then(res => res.json())\n            .then(res => {\n                res.currSearchName = currSearchName;\n                setSummonerStats(res);\n            })\n            .catch(error => {\n                setSummonerStats(null);\n                console.log(\"Got error: \" + error);\n            })\n            .finally(() => {\n                setIsLoading(false);\n            })\n    }\n\n    let contentView;\n    if (isLoading) {\n        contentView = (\n            <Container className={classes.loadingView} maxWidth={\"xs\"}>\n                <LinearProgress variant={\"indeterminate\"}/>\n                <Typography variant={\"caption\"}>Loading...</Typography>\n            </Container>\n        );\n    } else {\n        if (summonerStats) {\n            contentView = (\n                <Paper className={classes.summonerStatsPaper}>\n                    <SummonerStats matches={summonerStats.matches} searchSummoner={summonerStats.currSearchName}/>\n                </Paper>\n            );\n        } else {\n            let searchHistory = JSON.parse(localStorage.getItem(\"searchHistory\"));\n            searchHistory = searchHistory ? searchHistory : {};\n            const recentHistory = Object.entries(searchHistory)\n                .sort((a, b) => {\n                    return b[1] - a[1]\n                })\n                .map(x => x[0])\n                .slice(0, 5);\n            const recentSearches = recentHistory.map((value => (\n                <Grid item xs={\"auto\"} key={value}>\n                    <Button\n                        className={classes.pastSearchButton}\n                        variant={\"outlined\"}\n                        onClick={() => {\n                            setSearchName(value);\n                            search();\n                        }}\n                    >\n                        {value}\n                    </Button>\n                </Grid>\n            )));\n            contentView = (\n                <Container maxWidth={\"sm\"}>\n                    <Grid container spacing={3}>\n                        {recentSearches}\n                    </Grid>\n                </Container>\n            );\n        }\n    }\n\n    return (\n        <div className={classes.root}>\n            <Container className={classes.header} maxWidth={\"sm\"}>\n                <Typography className={classes.title} variant={\"h1\"} align={\"center\"}>\n                    LOLStats\n                </Typography>\n                <TextField\n                    className={classes.textField}\n                    label={\"Summoner Name\"}\n                    value={searchName}\n                    autoFocus={true}\n                    onChange={(event) => {\n                        setSearchName(event.target.value);\n                    }}\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            if (searchName.length > 0) {\n                                search();\n                            }\n                            event.preventDefault();\n                        }\n                    }}\n                />\n            </Container>\n            <Container className={classes.contentView} maxWidth={\"xl\"}>\n                {contentView}\n            </Container>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}